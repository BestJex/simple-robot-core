# suppress inspection "UnusedProperty" for whole file
#
# Copyright (c) 2020. ForteScarlet All rights reserved.
# Project  simple-robot-core
# File     en_US.lang
#
# You can contact the author through the following channels:
# github https://github.com/ForteScarlet
# gitee  https://gitee.com/ForteScarlet
# email  ForteScarlet@163.com
# QQ     1149159218
#
#

lang.init.finished=Language has already init finished. All non-Chinese languages are from Google Translate.


# 异常相关
# ModuleException
exception.module.load=Loading module bean failed! {0}


# exception.exceptionProcess
exception.exceptionProcess.exists=Processing already exists for exception type [{0}]! There cannot be more than one exception handler of the same type: {1}, {2}


# RobotRunException相关
exception.robotRun.moreDepends=Scan to multiple [{0}] implementation classes.
exception.robotRun.runtime.init.failed=Runtime init failed.
exception.robotRun.packageNull=The launcher has no package structure!

# AnnotationException相关，其中包括AnnotationUtils中出现的格式化参数
exception.annotation.class=Class [{0}] should not use annotation [{1}] : {2}
exception.annotation.method=The method [{1}] in class [{0}] should not use annotation [{2}]: {3}
exception.annotation.notStatic=Not static
exception.annotation.needReturn=Need return value
exception.annotation.returnTypeWrong=The return value's type is not instanceof this class type.
exception.annotation.resource.error=Cannot correctly proxy @Resource annotation to @Depend type: {0}

# BlockException及其子类相关
exception.block.indexOut=Out of index!
exception.noSuchBlockName.indexOut=Out of index!

# CQParamsException相关
exception.CQParams.noParam=Cannot get param[{0}]
exception.CQParams.paramCannotIgnore=The param[{1}] in CQ code type[{0}] cannot be ignore;
exception.CQParams.paramMismatch=The param[{1}] in CQ code type [{0}] should match a regular match: {2} , not: {3}

# CQParseException相关
exception.CQParse.cannotParse=[{0}] Cannot resolve to CQ code.
exception.CQParse.cannotToImage=Cannot convert [{0}] type CQ code to ImageCQCode type.
exception.CQParse.redundant=Please use escaped message text: Duplicate CQ code identification "{0}" Index of: {1}

# DependResourceException相关
## BasicResourceWarehouse中
### 不止一个子类型
exception.dependResource.moreChildType=There is more than one subtype of [{0}] type: [{1}],Try to get by name
### 不是基础数据类型
exception.dependResource.notBasic=[key({0}):value({1})], the 'value' [{2}]is not String type or basic data type
### 不是可转化的数据类型
exception.dependResource.notParseType=[{0}] Not a convertible data type. The types that can be used are: {1}
### 无法转化
exception.dependResource.cannotParse=Could not convert value type [{1}] of [key: "{0}"] to [{2}]

## Beans中
### 实例化出现错误
exception.dependResource.initFailed=[{0}] Instantiation error
### 构造无法定位
exception.dependResource.moreConstructor=More than one constructor exists, cannot be located

## BeansFactory中
### 出现了重复的name值
exception.dependResource.sameName="Must not have duplicate names: [{0}]: [{1}] AND [{2}]

## DependCenter中
### 依赖已经存在
exception.dependResource.dependExistByName=Dependency already exists: {0}
exception.dependResource.basicDependExistByName=Constant dependencies already exist:{0}
exception.dependResource.fieldGetterFuncFailed=Field value get function build exception!
exception.dependResource.fieldSetterFuncFailed=Field value assignment function builds abnormally!
### 有多个此类型的依赖对象存在, 一般情况下是使用父类类型获取的时候会存在的情况
exception.dependResource.moreDepend=There is more than one [{0}] type dependency, try to get it by name.
exception.dependResource.basicGet=The constant type [{0}] can only be obtained by specifying the name!

### 没有
exception.dependResource.noDepend=Unable to find dependency [{0}].
exception.dependResource.noDependAndOut=Unable to find dependency [{0}], and external dependencies cannot be found: {1}

## DependUtil中
exception.dependResource.noFieldGetter=Could not get getter method for field [{1}] of class [{0}]
exception.dependResource.cannotGetValue=Failed to get field value [{2}] of class [{1}] via getter [{0}]
exception.dependResource.fieldValueGetFailed=Field [{1}] value of class [{0}] gets exception!

exception.dependResource.noFieldSetter=Could not get setter method for field [{1}] of class [{0}]
exception.dependResource.CannotSetValue=Unable to assign value to field [{2}] of class [{1}] via setter [{0}]!
exception.dependResource.fieldValueSetFailed=Field [{1}] value assignment of class [{0}] is abnormal!

# ListenerException
exception.listener.async=An exception occurred in the asynchronous listener: {0}

# RobotDevException异常
### dynamicParamRepeat: 动态参数类型出现重复!
### key(type): class com.forte.Test1,
### value-old: old,
### value-new: new
exception.dev.dynamicParamTypeRepeat=The dynamic parameter type is duplicated! {0}, {1}, {2}
exception.dev.dynamicParamNameRepeat=Duplicate dynamic parameter names! {0}, {1}, {2}
xception.dev.configClone=Configuration clone failed!

# TimeTaskException相关
exception.timeTask.startFailed=Scheduled task failed to start!
exception.timeTask.schedulerInitFailed=Timed task scheduler instance acquisition failed!
exception.timeTask.registerFailed=Scheduled task [{0}] registration failed!
exception.timeTask.registerWhyFailed=Scheduled task [{0}] registration failed: {1}

# RobotApiException相关
exception.api.notSupport=API types not supported by the component: [{0}]
exception.api.noDefault=There is currently no default bot sender! There may not be any Bot information registered.


# FilterException相关
exception.filter.exists=Filter [{0}] has already exists.
exception.filter.notfound=DIY filter [{0}] not found.

# verifyException相关
exception.botVerify.failed=Bot[{0}]verify failed: {1}
exception.botVerify.failed.mismatch=Bot[{0}]verify failed: code mismatch: {1}
exception.botVerify.notExists=Account [{0}] does not exist
exception.botVerify.null=Account [{0}] verification result is null
exception.botVerify.close.failed=Account [{0}] logout failed!


# ListenerException
exception.listener.init.failed=Listener initialization error!

# clientHelper
exception.httpClientHelper.nameExists=Http template named [{0}] is already exists!
exception.httpClientHelper.notExists=Http template named [{0}] is not exists!
exception.httpClientHelper.noDefault=There are no default name.

# httpResponse
exception.httpResponse.code=Response code: {0} because: {1}

# 其他异常

# 数字转化异常 NumberFormatException，出现在BasicResourceWarehouse类中
exception.numberFormat.cannotParse="{0}" cannot be converted to type {1}
exception.numberFormat.noCorrespondingType="{0}" has no conversion type for [{1}]

# 无方法异常 NoSuchMethodException，出现在Beans类中
exception.noSuchMethod.noSuchNoParamConstructor=Failed to get the parameterless structure of [{0}]
exception.noSuchMethod.noGet=Could not get {1} for [{0}]

# 空指针异常
## 常量name不可为null, 使用在DependCenter中
exception.nullPointer.basicNameCannotEmpty=The name of the constant type cannot be empty!


# 其他一些运行期间，或者启动期间的参数

# 启动时候的系统类型展示
# system type，for debug
run.os.name=System name: {0}
run.os.version=System version: {0}
run.thread.blockingFactor=Thread blocking factor: {0}
run.thread.size=Thread pool core size: {0}
run.thread.maxSize=Maximum thread pool size: {0}

run.module.init.failed=Module configuration failed to read! {0}


run.start.success={0} successfully started, took {1} ms
run.depend.load=Loading dependencies >> {0}
run.listen.load.success=Listener loaded successfully! [{0}]
run.timeTask.loadSuccess=Loading scheduled tasks successfully! [ {0} ]

# 拦截器的各种准备
# msg
run.intercept.msg.prepare=Prepare the message interceptor...
run.intercept.msg.empty=No message interceptor
run.intercept.msg.load=Load message interceptor: {0}
# sender
run.intercept.sender.prepare=Prepare sender interceptor...
run.intercept.sender.empty=No sender interceptor
run.intercept.sender.load=Load sender interceptor: {0}
# setter
run.intercept.setter.prepare=Prepare setter interceptor...
run.intercept.setter.empty=No setter interceptor
run.intercept.setter.load=Load setter interceptor: {0}
# getter
run.intercept.getter.prepare=Prepare getter interceptor...
run.intercept.getter.empty=No getter interceptor
run.intercept.getter.load=Load getter interceptor: {0}

# botManager
run.botmanager.get.depend=Try to get BotManager instance object from dependency center
run.botmanager.get.default=Use the default BotManager {0}
run.botmanager.load=Load BotManager {0}
run.runtime.init=Runtime initialized.
run.runtime.bot.verify=Bot list verify success.
run.bot.info=Bot info: code: {0}, nick: {1}, level: {2}
run.bot.empty=Warning! You have not registered any Bot information! Before you register, you will not be able to use any transmitters in non-listening functions.

# 依赖工厂加载结束
run.depend.init.finish=End of factory initialization

# runtime
runtime.bot.register=Bot [{0}] register success！
runtime.bot.register.failed=Bot register failed: {0}

# filter
filter.register=Register filter: {0}

# listen
listener.init=Listener [{0}] initialization attempt was successful. {1} ms
listener.run.error=Listener [{0}] invoke failed! {1}
listener.bot.noVerify=BOT[{0}]not verify! The message has been intercepted.

# 送信拦截器
## 当某个API被拦截器阻止，或者说拦截的时候的消息
intercept.block=API [{0}] has been blocked.

# msgSender
msgSender.reply.failed=Parameter type is wrong! Only three types of messages [PrivateMsg], [GroupMsg], [DiscussMsg] are allowed instead of: {0}


## CoreSystem中使用的日志
system.version.check=Will start version detection.Please ignore the error logs that appear before the version detection ends, they are not harmful.
system.version.check.url=Check url: {0}
system.version.check.failed=Version check failed.You can choose to go to the maven repository to view it by yourself.
system.version.newest=Current core version: {0}, currently the latest version in the {1} release series.
system.version.notnewest=Current core version: {0}, there is a more advanced version {2} in the {1} version series, you can consider switching the core version. \nNote that the core replacement needs to ensure that the first two version numbers are the same: {1} \nYou can refer to: \nReference 1: {3} \nReference 2: {4}

depend.center.close=Closed [{0}]
depend.center.close.failed=Close [{0} ({1})] failed: {2}


resources.module.load=Module resource file loading: [{0}]
resources.module.load.scan=Module scan: [{0}]
resources.module.load.bean=Module load: [{0}]