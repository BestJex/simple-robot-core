#
# Copyright (c) 2020. ForteScarlet All rights reserved.
# Project  simple-robot-core
# File     zh_CN.lang
#
# You can contact the author through the following channels:
# github https://github.com/ForteScarlet
# gitee  https://gitee.com/ForteScarlet
# email  ForteScarlet@163.com
# QQ     1149159218
#
#

# suppress inspection "UnusedProperty" for whole file


lang.init.finished=语言已初始化完毕。

# 异常相关

# ModuleException
exception.module.load=加载自动配置异常！{0}

# exception.exceptionProcess
exception.exceptionProcess.exists=已存在针对异常类型[{0}]的处理！同一个类型的异常处理不能存在多个: {1}, {2}

# RobotRunException相关
exception.robotRun.moreDepends=扫描到多个[ {0} ]的实现类。
exception.robotRun.runtime.init.failed=Runtime初始化异常
exception.robotRun.packageNull=启动器没有包结构！

# AnnotationException相关，其中包括AnnotationUtils中出现的格式化参数
exception.annotation.class=类[{0}]不应当使用[{1}]注解: {2}
exception.annotation.method=类[{0}]的方法[{1}]不应当使用[{2}]注解: {3}
exception.annotation.notStatic=不是静态
exception.annotation.needReturn=需要返回值
exception.annotation.returnTypeWrong=返回值非该类或该类的子类类型
exception.annotation.resource.error=无法正确代理@Resource注解为@Depend类型: {0}

# BlockException及其子类相关
exception.block.indexOut=超出索引!
exception.noSuchBlockName.indexOut=超出索引!

# CQParamsException相关
exception.CQParams.noParam=无法获取参数[{0}]
exception.CQParams.paramCannotIgnore=CQ码类型[{0}]的参数[{1}]不可忽略。
exception.CQParams.paramMismatch=CQ码类型[{0}]的参数[{1}]应当符合正则匹配：{2}, 而不是：{3}

# CQParseException相关
exception.CQParse.cannotParse=[{0}] 无法解析为CQ码对象。
exception.CQParse.cannotToImage=无法将[{0}]类型的CQ码对象转化为ImageCQCode类型
exception.CQParse.redundant=请使用转义消息文本: 重复的CQ码标识 "{0}". 索引位于: {1}

# DependResourceException相关
## BasicResourceWarehouse中
### 不止一个子类型
exception.dependResource.moreChildType=存在不止一个[{0}]类型的子类型：[{1}],请尝试使用名称获取。
### 不是基础数据类型
exception.dependResource.notBasic=[key({0}):value({1})]的值类型[{2}]并非为String或8大基本数据类型(或其封装类)
### 不是可转化的数据类型
exception.dependResource.notParseType=[{0}] 不是可以转化的数据类型。可以使用的类型有：{1}
### 无法转化
exception.dependResource.cannotParse=无法将[key:"{0}"]的值类型[{1}]转化为[{2}]

## Beans中
### 实例化出现错误
exception.dependResource.initFailed=[{0}] 实例化错误
### 构造无法定位
exception.dependResource.moreConstructor=存在不止一个构造函数, 无法定位

## BeansFactory中
### 出现了重复的name值
exception.dependResource.sameName="不可出现重复的name: [{0}]: [{1}] AND [{2}]

## DependCenter中
### 依赖已经存在
exception.dependResource.dependExistByName=已经存在依赖: {0}
exception.dependResource.basicDependExistByName=已存在常量依赖: {0}
exception.dependResource.fieldGetterFuncFailed=字段值获取函数构建异常!
exception.dependResource.fieldSetterFuncFailed=字段值赋值函数构建异常!
### 有多个此类型的依赖对象存在, 一般情况下是使用父类类型获取的时候会存在的情况
exception.dependResource.moreDepend=存在不止一个[{0}]类型的依赖，请尝试使用名称获取。
exception.dependResource.basicGet=常量类型[{0}]只能通过指定名称获取!

### 没有
exception.dependResource.noDepend=无法找到依赖：[{0}]。
exception.dependResource.noDependAndOut=无法找到依赖：[{0}]，外部依赖也无法找到：{1}

## DependUtil中
exception.dependResource.noFieldGetter=无法获取类[{0}]的字段[{1}]的getter方法
exception.dependResource.cannotGetValue=无法通过getter[{0}]获取类[{1}]的字段值[{2}]
exception.dependResource.fieldValueGetFailed=类[{0}]的字段[{1}]值获取异常!

exception.dependResource.noFieldSetter=无法获取类[{0}]的字段[{1}]的setter方法
exception.dependResource.CannotSetValue=无法通过setter[{0}]为类[{1}]的字段[{2}]赋值!
exception.dependResource.fieldValueSetFailed=类[{0}]的字段[{1}]值赋值异常!


# RobotDevException异常
### dynamicParamRepeat: 动态参数类型出现重复!
### key(type): class com.forte.Test1,
### value-old: old,
### value-new: new
exception.dev.dynamicParamTypeRepeat=动态参数类型出现重复! {0}, {1}, {2}
exception.dev.dynamicParamNameRepeat=动态参数名称出现重复! {0}, {1}, {2}
exception.dev.configClone=配置类clone失败！


# TimeTaskException相关
exception.timeTask.startFailed=定时任务启动失败!
exception.timeTask.schedulerInitFailed=定时任务调度器实例获取失败!
exception.timeTask.registerFailed=定时任务[{0}]注册失败!
exception.timeTask.registerWhyFailed=定时任务[{0}]注册失败: {1}

# RobotApiException相关
exception.api.notSupport=组件所不支持的API类型：[ {0} ]
exception.api.noDefault=当前没有默认bot送信器！可能尚未注册任何Bot信息。

# FilterException相关
exception.filter.exists=已经存在自定义过滤器：{0}
exception.filter.notfound=无法获取自定义过滤器{0}：不存在！

# verifyException相关
exception.botVerify.failed=账号{0}验证失败：{1}
exception.botVerify.failed.mismatch=账号{0}验证失败：获取账号不匹配：{1}
exception.botVerify.notExists=账号[{0}]不存在
exception.botVerify.null=账号[{0}]验证结果为null
exception.botVerify.close.failed=账号[{0}]注销失败！

# ListenerException
exception.listener.init.failed=监听函数初始化错误！


# clientHelper
exception.httpClientHelper.nameExists=名称为[{0}]的Http模板已经存在！
exception.httpClientHelper.notExists=名称为[{0}]的Http模板不存在！
exception.httpClientHelper.noDefault=不存在默认Http模板！

# httpResponse
exception.httpResponse.code=响应状态码：{0}, 信息: {1}

# ListenerException
exception.listener.async=异步监听器出现异常: {0}

# 其他异常

# 数字转化异常 NumberFormatException，出现在BasicResourceWarehouse类中
exception.numberFormat.cannotParse="{0}"无法转化为{1}类型
exception.numberFormat.noCorrespondingType="{0}"没有对应[{1}]的转化类型

# 无方法异常 NoSuchMethodException，出现在Beans类中
exception.noSuchMethod.noSuchNoParamConstructor=无法获取[{0}]的无参构造
exception.noSuchMethod.noGet=无法获取[{0}]的{1}

# 空指针异常
## 常量name不可为null, 使用在DependCenter中
exception.nullPointer.basicNameCannotEmpty=常量类型的name不可为空!

# 其他一些运行期间，或者启动期间的参数

# 启动时候的系统类型展示
run.os.name=系统名称: {0}
run.os.version=系统版本: {0}
run.thread.blockingFactor=线程阻塞系数：{0}
run.thread.size=线程池核心大小：{0}
run.thread.maxSize=线程池最大大小：{0}

run.module.init.failed=module配置读取失败！{0}

run.start.success={0}启动成功, 耗时 {1} ms
run.depend.load=加载依赖 >> {0}
run.listen.load.success=监听函数加载成功！[{0}]
run.timeTask.loadSuccess=加载定时任务成功！[{0}]

# 拦截器的各种准备
# msg
run.intercept.msg.prepare=准备消息拦截器...
run.intercept.msg.empty=无消息拦截器
run.intercept.msg.load=加载消息拦截器: {0}
# sender
run.intercept.sender.prepare=准备sender送信拦截器...
run.intercept.sender.empty=无sender送信拦截器
run.intercept.sender.load=加载sender送信拦截器: {0}
# setter
run.intercept.setter.prepare=准备setter送信拦截器...
run.intercept.setter.empty=无setter送信拦截器
run.intercept.setter.load=加载setter送信拦截器: {0}
# getter
run.intercept.getter.prepare=准备getter送信拦截器...
run.intercept.getter.empty=无getter送信拦截器
run.intercept.getter.load=加载getter送信拦截器: {0}

# botManager
run.botmanager.get.depend=尝试从依赖中心获取账号管理器实例对象
run.botmanager.get.default=使用默认的账号管理器 {0}
run.botmanager.load=加载账号管理器 {0}
run.runtime.init=Runtime初始化完毕。
run.runtime.bot.verify=Bot账号列表验证完成。
run.bot.info=账号信息获取成功: 账号: {0}, 昵称: {1}, 等级: {2}
run.bot.empty=警告！你尚未注册任何Bot信息！在你注册之前，将无法使用任何非监听函数中的送信器。

run.depend.init.finish=依赖工厂初始化结束

# runtime
runtime.bot.register=账号[{0}]注册成功！
runtime.bot.register.failed=账号注册失败: {0}

# filter
filter.register=注册过滤器：{0}

# listener
listener.init=监听函数[{0}]初始化尝试成功。{1} ms
listener.run.error=监听函数[{0}]执行异常! {1}
listener.bot.noVerify=BOT[{0}]未认证! 消息已被拦截。

# 送信拦截器
## 当某个API被拦截器阻止，或者说拦截的时候的消息
intercept.block=API[{0}]已被阻止

# msgSender
msgSender.reply.failed=参数类型错误！只允许[PrivateMsg]、[GroupMsg]、[DiscussMsg]三种类型的消息，而不是：{0}



## CoreSystem中使用的日志
system.version.check=将要开始版本检测。请无视版本检测结束前所出现的错误日志，他们没有什么危害。
system.version.check.url=检测网址：{0}
system.version.check.failed=版本检测失败。你可以选择自行前往maven仓库进行查看。
system.version.newest=当前核心版本: {0}, 目前为{1}版本系列中的最新版。
system.version.notnewest=当前核心版本: {0}, 在{1}版本系列中存在更高级的版本{2}, 可以考虑切换核心版本。\n注意，核心替换需要保证前两个版本号位相相同：{1}\n你可以参考：\n参考一: {3}\n参考二：{4}

depend.center.close=已关闭[{0}]
depend.center.close.failed=关闭[{0} ({1})]失败：{2}


resources.module.load=模组资源文件加载: [{0}]
resources.module.load.scan=模组扫描：[{0}]
resources.module.load.bean=模组加载：[{0}]


